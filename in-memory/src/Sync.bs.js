// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");

function incrementTicked(current) {
  return [
          {
            config: current.config,
            ticked: current.ticked + 1 | 0,
            states: current.states,
            remote: current.remote
          },
          /* [] */0
        ];
}

function checkFetchChanges(model) {
  var match = model.states.changes;
  if (typeof match === "number" && match === 0) {
    return [
            {
              config: model.config,
              ticked: model.ticked,
              states: {
                changes: /* ChangesFeedCurrentlyFetching */1
              },
              remote: model.remote
            },
            {
              hd: /* FetchChangesFeed */0,
              tl: /* [] */0
            }
          ];
  } else {
    return [
            model,
            /* [] */0
          ];
  }
}

function combineHandlers(handlers) {
  return function (model) {
    var _handlers = handlers;
    var _model = model;
    var _acc = /* [] */0;
    while(true) {
      var acc = _acc;
      var model$1 = _model;
      var handlers$1 = _handlers;
      if (!handlers$1) {
        return [
                model$1,
                acc
              ];
      }
      var match = Curry._1(handlers$1.hd, model$1);
      _acc = Belt_List.concat(acc, match[1]);
      _model = match[0];
      _handlers = handlers$1.tl;
      continue ;
    };
  };
}

var handleTick = combineHandlers({
      hd: incrementTicked,
      tl: {
        hd: checkFetchChanges,
        tl: /* [] */0
      }
    });

function update(model, $$event) {
  if ($$event) {
    return [
            model,
            /* [] */0
          ];
  } else {
    return Curry._1(handleTick, model);
  }
}

exports.update = update;
/* handleTick Not a pure module */
